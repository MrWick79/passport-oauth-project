express handlebars 
there is a layout which wraps around everything
thigns like html body tags 
this layout wraps around views,
and each thing in the layout neednt be 
repeated for every view indiidualy

steps
install required packages
setup basic server
define dotenv variables in config.env file in config folder
PORT, DB URI
create dbconfig.js file in config folder and export function
connect server with db by calling this function in app.js

------------------------------------------------------------------------------------------------------------------------------------------------------
passport cookie sessions

OAuth 2.0-based strategies require a `verify` function which receives the
credential (`accessToken`) for accessing the Facebook API on the user's
behalf, along with the user's profile.  The function must invoke `cb`
with a user object, which will be set at `req.user` in route handlers after
authentication.

In a typical web application, the credentials used to authenticate a user will only be transmitted during the login request. If authentication succeeds, a session will be established and maintained via a cookie set in the user's browser.

Each subsequent request will not contain credentials, but rather the unique cookie that identifies the session. In order to support login sessions, Passport will serialize and deserialize user instances to and from the session.

passport.serializeUser(function(user, done) {
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  User.findById(id, function(err, user) {
    done(err, user);
  });
});

In this example, only the user ID is serialized to the session, keeping the amount of data stored within the session small. When subsequent requests are received, this ID is used to find the user, which will be restored to req.user.

The serialization and deserialization logic is supplied by the application, allowing the application to choose an appropriate database and/or object mapper, without imposition by the authentication layer.

In order to restore authentication state across HTTP requests, Passport needs
to serialize users into and deserialize users out of the session.  In a
production-quality application, this would typically be as simple as
supplying the user ID when serializing, and querying the user record by ID
from the database when deserializing

------------------------------------------------------------------------------------------------------------------------------------------------------
Authenticate Requests

Use passport.authenticate(), specifying the 'google' strategy, to authenticate requests.

For example, as route middleware in an Express application:

app.get('/auth/google',
  passport.authenticate('google', { scope: ['profile'] }));

app.get('/auth/google/callback', 
  passport.authenticate('google', { failureRedirect: '/login' }),
  function(req, res) {
    // Successful authentication, redirect home.
    res.redirect('/');
  });
